// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson171edd05Decode20191OPGPlus2InternalPkgModels(in *jlexer.Lexer, out *JwtData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "email":
			out.Email = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "aud":
			out.Audience = string(in.String())
		case "exp":
			out.ExpiresAt = int64(in.Int64())
		case "iat":
			out.IssuedAt = int64(in.Int64())
		case "iss":
			out.Issuer = string(in.String())
		case "nbf":
			out.NotBefore = int64(in.Int64())
		case "sub":
			out.Subject = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson171edd05Encode20191OPGPlus2InternalPkgModels(out *jwriter.Writer, in JwtData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	if in.Audience != "" {
		const prefix string = ",\"aud\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Audience))
	}
	if in.ExpiresAt != 0 {
		const prefix string = ",\"exp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ExpiresAt))
	}
	if in.IssuedAt != 0 {
		const prefix string = ",\"iat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IssuedAt))
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	if in.NotBefore != 0 {
		const prefix string = ",\"nbf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NotBefore))
	}
	if in.Subject != "" {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JwtData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson171edd05Encode20191OPGPlus2InternalPkgModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JwtData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson171edd05Encode20191OPGPlus2InternalPkgModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JwtData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson171edd05Decode20191OPGPlus2InternalPkgModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JwtData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson171edd05Decode20191OPGPlus2InternalPkgModels(l, v)
}
