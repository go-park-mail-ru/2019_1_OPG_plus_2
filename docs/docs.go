// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-04-19 19:24:17.303871064 +0300 MSK m=+0.245828618

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "Game based on filling field with color cells",
        "title": "Colors service API by OPG+2",
        "contact": {
            "name": "@DanikNik",
            "email": "nikolsky.dan@gmail.com"
        },
        "license": {
            "name": "Apache 2.0"
        },
        "version": "1.0"
    },
    "host": "localhost:8002",
    "basePath": "/api",
    "paths": {
        "/User": {
            "put": {
                "description": "This method updates info in profile and Auth-db record of User, who is making a query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Updates client's User",
                "parameters": [
                    {
                        "description": "User new profile data",
                        "name": "profile_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.UpdateUserData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    }
                }
            },
            "post": {
                "description": "This method creates records about new User in Auth-bd and User-db and then sends cookie to User in order to identify",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Registers User",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "profile_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.SignUpData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.IncorrectFieldsAnswer"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    }
                }
            },
            "delete": {
                "description": "This method deletes all information about User, making a query, including profile, game stats and authorization info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Deletes User and User of client",
                "parameters": [
                    {
                        "description": "InfoLogger required to remove current User",
                        "name": "remove_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.RemoveUserData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    }
                }
            }
        },
        "/User/{id}": {
            "get": {
                "description": "This method provides client with User data, matching required ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Produces User profile info",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "users ID, if none, returned logged in User",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.UserDataAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    }
                }
            }
        },
        "/avatar": {
            "post": {
                "description": "This method saves avatar image in server storage and sets it as clients User avatar",
                "consumes": [
                    "image/png",
                    "image/jpeg"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Saves new avatar image of client's User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.UploadAvatarAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    }
                }
            }
        },
        "/password": {
            "put": {
                "description": "This method updates users password, requiring password and confirmation. User data is pulled from jwt-token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Updates User password",
                "parameters": [
                    {
                        "description": "New password info",
                        "name": "update_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.UpdatePasswordData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.IncorrectFieldsAnswer"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    }
                }
            }
        },
        "/session": {
            "get": {
                "description": "This method checks whether User is signed in or signed out",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Checks User session",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    }
                }
            },
            "post": {
                "description": "This method logs User in and sets cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Grants client access",
                "parameters": [
                    {
                        "description": "Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.SignInData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.IncorrectFieldsAnswer"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    }
                }
            },
            "delete": {
                "description": "This method logs User out and deletes cookie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logs User out",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "This method provides client with scoreboard limited with {limit} entries per page and offset of {offset} from the first position",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scoreboard"
                ],
                "summary": "Produces scoreboard page with {limit} and {offset}",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Entries per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ScoreboardUserData"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.MessageAnswer"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.IncorrectFieldsAnswer": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[email",
                        " username]"
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "incorrect fields"
                },
                "status": {
                    "type": "integer",
                    "example": 204
                }
            }
        },
        "models.MessageAnswer": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "ok"
                },
                "status": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "models.RemoveUserData": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "SecretPass1!"
                }
            }
        },
        "models.ScoreboardUserData": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "\u003csome avatar url\u003e"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "score": {
                    "type": "integer",
                    "example": 314159
                },
                "username": {
                    "type": "string",
                    "example": "XxX__NaGiBaToR__XxX"
                }
            }
        },
        "models.SignInData": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "test@mail.ru"
                },
                "password": {
                    "type": "string",
                    "example": "Qwerty123"
                }
            }
        },
        "models.SignUpData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user_test@test.com"
                },
                "password": {
                    "type": "string",
                    "example": "SecretPass1!"
                },
                "username": {
                    "type": "string",
                    "example": "user_test"
                }
            }
        },
        "models.UpdatePasswordData": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string",
                    "example": "SecretPass2!"
                },
                "password_confirm": {
                    "type": "string",
                    "example": "SecretPass2!"
                }
            }
        },
        "models.UpdateUserData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user_test@test.com"
                },
                "username": {
                    "type": "string",
                    "example": "user_test"
                }
            }
        },
        "models.UploadAvatarAnswer": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "/static/1.jpg"
                },
                "message": {
                    "type": "string",
                    "example": "avatar uploaded"
                },
                "status": {
                    "type": "integer",
                    "example": 108
                }
            }
        },
        "models.UserData": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "\u003csome avatar url\u003e"
                },
                "email": {
                    "type": "string",
                    "example": "user_test@test.com"
                },
                "games": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lose": {
                    "type": "integer"
                },
                "score": {
                    "type": "integer"
                },
                "username": {
                    "type": "string",
                    "example": "user_test"
                },
                "win": {
                    "type": "integer"
                }
            }
        },
        "models.UserDataAnswer": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/models.UserData"
                },
                "message": {
                    "type": "string",
                    "example": "user found"
                },
                "status": {
                    "type": "integer",
                    "example": 105
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
