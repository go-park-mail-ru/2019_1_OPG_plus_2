basePath: /api
definitions:
  models.ScoreboardRecord:
    properties:
      position:
        example: 1
        type: integer
      score:
        example: 314159
        type: integer
      username:
        example: XxX__NaGiBaToR__XxX
        type: string
    type: object
  models.SignInData:
    properties:
      login:
        example: test@mail.ru
        type: string
      password:
        example: Qwerty123
        type: string
    type: object
  models.SuccessOrErrorMessage:
    properties:
      message:
        example: Query processed successfully
        type: string
      status:
        example: 200
        type: integer
    type: object
  models.UserData:
    properties:
      email:
        example: user_test@test.com
        type: string
      password:
        example: verysecretpasswordwhichnooneknows
        type: string
      username:
        example: user_test
        type: string
    type: object
  models.UserProfile:
    properties:
      avatar_url:
        example: <some avatar url>
        type: string
      email:
        example: user_test@test.com
        type: string
      games_played:
        type: integer
      id:
        example: 1
        type: integer
      lose:
        type: integer
      score:
        type: integer
      username:
        example: user_test
        type: string
      win:
        type: integer
    type: object
host: localhost:8001
info:
  contact:
    email: nikolsky.dan@gmail.com
    name: '@Xatabch'
  description: Game based on filling field with color cells
  license:
    name: Apache 2.0
  title: Colors service API by OPG+2
  version: "1.0"
paths:
  /profile:
    delete:
      description: This method deletes all information about user, making a query,
        including user, game stats and authorization info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
      summary: Deletes user and user of client
      tags:
      - user
    post:
      consumes:
      - application/json
      description: This method creates records about new user in auth-bd and user-db
        and then sends cookie to user in order to identify
      parameters:
      - description: User user data
        in: body
        name: profile_data
        required: true
        schema:
          $ref: '#/definitions/models.UserData'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
      summary: Registers user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: This method updates info in user and auth-db record of user,
        who is making a query
      parameters:
      - description: User new user data
        in: body
        name: profile_data
        required: true
        schema:
          $ref: '#/definitions/models.UserData'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
      summary: Updates client's user
      tags:
      - user
  /profile/{id}:
    get:
      consumes:
      - application/json
      description: This method provides client with user data, matching required
        ID
      parameters:
      - description: Profile ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserProfile'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
      summary: Produces user user info
      tags:
      - user
  /profiles/score:
    get:
      description: This method provides client with scoreboard limited with {limit}
        entries per page and offset of {offset} from the first position
      parameters:
      - description: Entries per page
        in: query
        name: limit
        type: integer
      - description: Entries from the first position
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ScoreboardRecord'
            type: array
      summary: Produces scoreboard page with {limit} and {offset}
      tags:
      - scoreboard
  /session:
    delete:
      description: This method logs user out and deletes cookie
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.SignInData'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
      summary: Logs user out
      tags:
      - auth
    get:
      description: This method checks whether user is signed in or signed out
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
      summary: Checks user session
      tags:
      - auth
    post:
      consumes:
      - application/json
      description: This method logs user in and sets cookie
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.SignInData'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
      summary: Grants client access
      tags:
      - auth
  /upload_avatar:
    post:
      consumes:
      - image/png
      - image/jpeg
      description: This method saves avatar image in server storage and sets it as
        clients user avatar
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.SuccessOrErrorMessage'
            type: object
      summary: Saves new avatar image of client's user
      tags:
      - user
swagger: "2.0"
