basePath: /api
definitions:
  models.IncorrectFieldsAnswer:
    properties:
      data:
        example:
        - '[email'
        - ' username]'
        items:
          type: string
        type: array
      message:
        example: incorrect fields
        type: string
      status:
        example: 204
        type: integer
    type: object
  models.MessageAnswer:
    properties:
      message:
        example: ok
        type: string
      status:
        example: 100
        type: integer
    type: object
  models.RemoveUserData:
    properties:
      password:
        example: SecretPass1!
        type: string
    type: object
  models.ScoreboardUserData:
    properties:
      avatar:
        example: <some avatar url>
        type: string
      id:
        example: 1
        type: integer
      score:
        example: 314159
        type: integer
      username:
        example: XxX__NaGiBaToR__XxX
        type: string
    type: object
  models.SignInData:
    properties:
      login:
        example: test@mail.ru
        type: string
      password:
        example: Qwerty123
        type: string
    type: object
  models.SignUpData:
    properties:
      email:
        example: user_test@test.com
        type: string
      password:
        example: SecretPass1!
        type: string
      username:
        example: user_test
        type: string
    type: object
  models.UpdatePasswordData:
    properties:
      new_password:
        example: SecretPass2!
        type: string
      password_confirm:
        example: SecretPass2!
        type: string
    type: object
  models.UpdateUserData:
    properties:
      email:
        example: user_test@test.com
        type: string
      username:
        example: user_test
        type: string
    type: object
  models.UploadAvatarAnswer:
    properties:
      data:
        example: /upload/1.jpg
        type: string
      message:
        example: avatar uploaded
        type: string
      status:
        example: 108
        type: integer
    type: object
  models.UserData:
    properties:
      avatar:
        example: <some avatar url>
        type: string
      email:
        example: user_test@test.com
        type: string
      games:
        type: integer
      id:
        example: 1
        type: integer
      lose:
        type: integer
      score:
        type: integer
      username:
        example: user_test
        type: string
      win:
        type: integer
    type: object
  models.UserDataAnswer:
    properties:
      data:
        $ref: '#/definitions/models.UserData'
        type: object
      message:
        example: user found
        type: string
      status:
        example: 105
        type: integer
    type: object
host: localhost:8002
info:
  contact:
    email: nikolsky.dan@gmail.com
    name: '@DanikNik'
  description: Game based on filling field with color cells
  license:
    name: Apache 2.0
  title: Colors service API by OPG+2
  version: "1.0"
paths:
  /avatar:
    post:
      consumes:
      - image/png
      - image/jpeg
      description: This method saves avatar image in server storage and sets it as
        clients user avatar
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UploadAvatarAnswer'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
      summary: Saves new avatar image of client's Username
      tags:
      - user
  /password:
    put:
      description: This method updates users password, requiring password and confirmation.
        User data is pulled from jwt-token
      parameters:
      - description: New password info
        in: body
        name: update_data
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePasswordData'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.IncorrectFieldsAnswer'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
      summary: Updates user password
      tags:
      - Auth
  /session:
    delete:
      description: This method logs user out and deletes cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
      summary: Logs user out
      tags:
      - Auth
    get:
      description: This method checks whether Username is signed in or signed out
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
      summary: Checks user session
      tags:
      - Auth
    post:
      consumes:
      - application/json
      description: This method logs user in and sets cookie
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.SignInData'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.IncorrectFieldsAnswer'
            type: object
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
      summary: Grants client access
      tags:
      - Auth
  /user:
    delete:
      description: This method deletes all information about user, making a query,
        including profile, game stats and authorization info
      parameters:
      - description: Info required to remove current user
        in: body
        name: remove_data
        required: true
        schema:
          $ref: '#/definitions/models.RemoveUserData'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
      summary: Deletes user and profile of client
      tags:
      - user
    post:
      consumes:
      - application/json
      description: This method creates records about new user in Auth-bd and user-db
        and then sends cookie to user in order to identify
      parameters:
      - description: user data
        in: body
        name: profile_data
        required: true
        schema:
          $ref: '#/definitions/models.SignUpData'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.IncorrectFieldsAnswer'
            type: object
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
      summary: Registers user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: This method updates info in profile and Auth-db record of user,
        who is making a query
      parameters:
      - description: user new profile data
        in: body
        name: profile_data
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserData'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
      summary: Updates client's user
      tags:
      - user
  /user/{id}:
    get:
      consumes:
      - application/json
      description: This method provides client with user data, matching required ID
      parameters:
      - description: users ID, if none, returned logged in user
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDataAnswer'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
      summary: Produces user profile info
      tags:
      - user
  /users:
    get:
      description: This method provides client with scoreboard limited with {limit}
        entries per page and offset of {offset} from the first position
      parameters:
      - description: Entries per page
        in: query
        name: limit
        type: integer
      - description: Number of page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ScoreboardUserData'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.MessageAnswer'
            type: object
      summary: Produces scoreboard page with {limit} and {offset}
      tags:
      - scoreboard
swagger: "2.0"
